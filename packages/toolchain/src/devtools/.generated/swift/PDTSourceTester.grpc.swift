//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: PDTSourceTester.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `PaperbackSourceTesterClient`, then call methods of this protocol to make API calls.
public protocol PaperbackSourceTesterClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: PaperbackSourceTesterClientInterceptorFactoryProtocol? { get }

  func installSource(
    _ request: SourceInstallRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SourceInstallRequest, SourceInstallResponse>

  func testSource(
    _ request: SourceTestRequest,
    callOptions: CallOptions?,
    handler: @escaping (SourceTestResponse) -> Void
  ) -> ServerStreamingCall<SourceTestRequest, SourceTestResponse>
}

extension PaperbackSourceTesterClientProtocol {
  public var serviceName: String {
    return "PaperbackSourceTester"
  }

  /// Unary call to installSource
  ///
  /// - Parameters:
  ///   - request: Request to send to installSource.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func installSource(
    _ request: SourceInstallRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SourceInstallRequest, SourceInstallResponse> {
    return self.makeUnaryCall(
      path: PaperbackSourceTesterClientMetadata.Methods.installSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeinstallSourceInterceptors() ?? []
    )
  }

  /// Server streaming call to testSource
  ///
  /// - Parameters:
  ///   - request: Request to send to testSource.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func testSource(
    _ request: SourceTestRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (SourceTestResponse) -> Void
  ) -> ServerStreamingCall<SourceTestRequest, SourceTestResponse> {
    return self.makeServerStreamingCall(
      path: PaperbackSourceTesterClientMetadata.Methods.testSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.maketestSourceInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension PaperbackSourceTesterClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "PaperbackSourceTesterNIOClient")
public final class PaperbackSourceTesterClient: PaperbackSourceTesterClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: PaperbackSourceTesterClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: PaperbackSourceTesterClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the PaperbackSourceTester service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: PaperbackSourceTesterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct PaperbackSourceTesterNIOClient: PaperbackSourceTesterClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: PaperbackSourceTesterClientInterceptorFactoryProtocol?

  /// Creates a client for the PaperbackSourceTester service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: PaperbackSourceTesterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol PaperbackSourceTesterAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: PaperbackSourceTesterClientInterceptorFactoryProtocol? { get }

  func makeInstallSourceCall(
    _ request: SourceInstallRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SourceInstallRequest, SourceInstallResponse>

  func makeTestSourceCall(
    _ request: SourceTestRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<SourceTestRequest, SourceTestResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension PaperbackSourceTesterAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return PaperbackSourceTesterClientMetadata.serviceDescriptor
  }

  public var interceptors: PaperbackSourceTesterClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeInstallSourceCall(
    _ request: SourceInstallRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SourceInstallRequest, SourceInstallResponse> {
    return self.makeAsyncUnaryCall(
      path: PaperbackSourceTesterClientMetadata.Methods.installSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeinstallSourceInterceptors() ?? []
    )
  }

  public func makeTestSourceCall(
    _ request: SourceTestRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<SourceTestRequest, SourceTestResponse> {
    return self.makeAsyncServerStreamingCall(
      path: PaperbackSourceTesterClientMetadata.Methods.testSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.maketestSourceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension PaperbackSourceTesterAsyncClientProtocol {
  public func installSource(
    _ request: SourceInstallRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SourceInstallResponse {
    return try await self.performAsyncUnaryCall(
      path: PaperbackSourceTesterClientMetadata.Methods.installSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeinstallSourceInterceptors() ?? []
    )
  }

  public func testSource(
    _ request: SourceTestRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<SourceTestResponse> {
    return self.performAsyncServerStreamingCall(
      path: PaperbackSourceTesterClientMetadata.Methods.testSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.maketestSourceInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct PaperbackSourceTesterAsyncClient: PaperbackSourceTesterAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: PaperbackSourceTesterClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: PaperbackSourceTesterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol PaperbackSourceTesterClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'installSource'.
  func makeinstallSourceInterceptors() -> [ClientInterceptor<SourceInstallRequest, SourceInstallResponse>]

  /// - Returns: Interceptors to use when invoking 'testSource'.
  func maketestSourceInterceptors() -> [ClientInterceptor<SourceTestRequest, SourceTestResponse>]
}

public enum PaperbackSourceTesterClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PaperbackSourceTester",
    fullName: "PaperbackSourceTester",
    methods: [
      PaperbackSourceTesterClientMetadata.Methods.installSource,
      PaperbackSourceTesterClientMetadata.Methods.testSource,
    ]
  )

  public enum Methods {
    public static let installSource = GRPCMethodDescriptor(
      name: "installSource",
      path: "/PaperbackSourceTester/installSource",
      type: GRPCCallType.unary
    )

    public static let testSource = GRPCMethodDescriptor(
      name: "testSource",
      path: "/PaperbackSourceTester/testSource",
      type: GRPCCallType.serverStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol PaperbackSourceTesterProvider: CallHandlerProvider {
  var interceptors: PaperbackSourceTesterServerInterceptorFactoryProtocol? { get }

  func installSource(request: SourceInstallRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SourceInstallResponse>

  func testSource(request: SourceTestRequest, context: StreamingResponseCallContext<SourceTestResponse>) -> EventLoopFuture<GRPCStatus>
}

extension PaperbackSourceTesterProvider {
  public var serviceName: Substring {
    return PaperbackSourceTesterServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "installSource":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SourceInstallRequest>(),
        responseSerializer: ProtobufSerializer<SourceInstallResponse>(),
        interceptors: self.interceptors?.makeinstallSourceInterceptors() ?? [],
        userFunction: self.installSource(request:context:)
      )

    case "testSource":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SourceTestRequest>(),
        responseSerializer: ProtobufSerializer<SourceTestResponse>(),
        interceptors: self.interceptors?.maketestSourceInterceptors() ?? [],
        userFunction: self.testSource(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol PaperbackSourceTesterAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: PaperbackSourceTesterServerInterceptorFactoryProtocol? { get }

  func installSource(
    request: SourceInstallRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SourceInstallResponse

  func testSource(
    request: SourceTestRequest,
    responseStream: GRPCAsyncResponseStreamWriter<SourceTestResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension PaperbackSourceTesterAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return PaperbackSourceTesterServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return PaperbackSourceTesterServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: PaperbackSourceTesterServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "installSource":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SourceInstallRequest>(),
        responseSerializer: ProtobufSerializer<SourceInstallResponse>(),
        interceptors: self.interceptors?.makeinstallSourceInterceptors() ?? [],
        wrapping: { try await self.installSource(request: $0, context: $1) }
      )

    case "testSource":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SourceTestRequest>(),
        responseSerializer: ProtobufSerializer<SourceTestResponse>(),
        interceptors: self.interceptors?.maketestSourceInterceptors() ?? [],
        wrapping: { try await self.testSource(request: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

public protocol PaperbackSourceTesterServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'installSource'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeinstallSourceInterceptors() -> [ServerInterceptor<SourceInstallRequest, SourceInstallResponse>]

  /// - Returns: Interceptors to use when handling 'testSource'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func maketestSourceInterceptors() -> [ServerInterceptor<SourceTestRequest, SourceTestResponse>]
}

public enum PaperbackSourceTesterServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PaperbackSourceTester",
    fullName: "PaperbackSourceTester",
    methods: [
      PaperbackSourceTesterServerMetadata.Methods.installSource,
      PaperbackSourceTesterServerMetadata.Methods.testSource,
    ]
  )

  public enum Methods {
    public static let installSource = GRPCMethodDescriptor(
      name: "installSource",
      path: "/PaperbackSourceTester/installSource",
      type: GRPCCallType.unary
    )

    public static let testSource = GRPCMethodDescriptor(
      name: "testSource",
      path: "/PaperbackSourceTester/testSource",
      type: GRPCCallType.serverStreaming
    )
  }
}
