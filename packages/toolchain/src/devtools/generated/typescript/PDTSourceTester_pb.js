// source: PDTSourceTester.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.SourceInstallRequest', null, global);
goog.exportSymbol('proto.SourceInstallResponse', null, global);
goog.exportSymbol('proto.SourceInstallResponse.Status', null, global);
goog.exportSymbol('proto.SourceTestRequest', null, global);
goog.exportSymbol('proto.SourceTestRequest.TestData', null, global);
goog.exportSymbol('proto.SourceTestRequest.TestData.SearchData', null, global);
goog.exportSymbol('proto.SourceTestResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SourceInstallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SourceInstallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SourceInstallRequest.displayName = 'proto.SourceInstallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SourceInstallResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SourceInstallResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SourceInstallResponse.displayName = 'proto.SourceInstallResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SourceTestRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SourceTestRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SourceTestRequest.displayName = 'proto.SourceTestRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SourceTestRequest.TestData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SourceTestRequest.TestData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SourceTestRequest.TestData.displayName = 'proto.SourceTestRequest.TestData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SourceTestRequest.TestData.SearchData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SourceTestRequest.TestData.SearchData.repeatedFields_, null);
};
goog.inherits(proto.SourceTestRequest.TestData.SearchData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SourceTestRequest.TestData.SearchData.displayName = 'proto.SourceTestRequest.TestData.SearchData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SourceTestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SourceTestResponse.repeatedFields_, null);
};
goog.inherits(proto.SourceTestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SourceTestResponse.displayName = 'proto.SourceTestResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SourceInstallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SourceInstallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SourceInstallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SourceInstallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    repobaseurl: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SourceInstallRequest}
 */
proto.SourceInstallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SourceInstallRequest;
  return proto.SourceInstallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SourceInstallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SourceInstallRequest}
 */
proto.SourceInstallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepobaseurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SourceInstallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SourceInstallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SourceInstallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SourceInstallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRepobaseurl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string sourceId = 1;
 * @return {string}
 */
proto.SourceInstallRequest.prototype.getSourceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SourceInstallRequest} returns this
 */
proto.SourceInstallRequest.prototype.setSourceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string repoBaseUrl = 2;
 * @return {string}
 */
proto.SourceInstallRequest.prototype.getRepobaseurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SourceInstallRequest} returns this
 */
proto.SourceInstallRequest.prototype.setRepobaseurl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SourceInstallResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SourceInstallResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SourceInstallResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SourceInstallResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SourceInstallResponse}
 */
proto.SourceInstallResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SourceInstallResponse;
  return proto.SourceInstallResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SourceInstallResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SourceInstallResponse}
 */
proto.SourceInstallResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SourceInstallResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SourceInstallResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SourceInstallResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SourceInstallResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.SourceInstallResponse.Status = {
  SUCCESS: 0,
  FAILURE: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SourceTestRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SourceTestRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SourceTestRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SourceTestRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: (f = msg.getData()) && proto.SourceTestRequest.TestData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SourceTestRequest}
 */
proto.SourceTestRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SourceTestRequest;
  return proto.SourceTestRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SourceTestRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SourceTestRequest}
 */
proto.SourceTestRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceid(value);
      break;
    case 2:
      var value = new proto.SourceTestRequest.TestData;
      reader.readMessage(value,proto.SourceTestRequest.TestData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SourceTestRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SourceTestRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SourceTestRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SourceTestRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SourceTestRequest.TestData.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SourceTestRequest.TestData.prototype.toObject = function(opt_includeInstance) {
  return proto.SourceTestRequest.TestData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SourceTestRequest.TestData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SourceTestRequest.TestData.toObject = function(includeInstance, msg) {
  var f, obj = {
    mangaid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    chapterid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    updatetime: (f = msg.getUpdatetime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    searchdata: (f = msg.getSearchdata()) && proto.SourceTestRequest.TestData.SearchData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SourceTestRequest.TestData}
 */
proto.SourceTestRequest.TestData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SourceTestRequest.TestData;
  return proto.SourceTestRequest.TestData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SourceTestRequest.TestData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SourceTestRequest.TestData}
 */
proto.SourceTestRequest.TestData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMangaid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChapterid(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatetime(value);
      break;
    case 4:
      var value = new proto.SourceTestRequest.TestData.SearchData;
      reader.readMessage(value,proto.SourceTestRequest.TestData.SearchData.deserializeBinaryFromReader);
      msg.setSearchdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SourceTestRequest.TestData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SourceTestRequest.TestData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SourceTestRequest.TestData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SourceTestRequest.TestData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUpdatetime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getSearchdata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SourceTestRequest.TestData.SearchData.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SourceTestRequest.TestData.SearchData.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SourceTestRequest.TestData.SearchData.prototype.toObject = function(opt_includeInstance) {
  return proto.SourceTestRequest.TestData.SearchData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SourceTestRequest.TestData.SearchData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SourceTestRequest.TestData.SearchData.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, ""),
    includedtagsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    excludedtagsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    itemindex: jspb.Message.getFieldWithDefault(msg, 4, ""),
    itemid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SourceTestRequest.TestData.SearchData}
 */
proto.SourceTestRequest.TestData.SearchData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SourceTestRequest.TestData.SearchData;
  return proto.SourceTestRequest.TestData.SearchData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SourceTestRequest.TestData.SearchData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SourceTestRequest.TestData.SearchData}
 */
proto.SourceTestRequest.TestData.SearchData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addIncludedtags(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addExcludedtags(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemindex(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SourceTestRequest.TestData.SearchData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SourceTestRequest.TestData.SearchData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SourceTestRequest.TestData.SearchData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SourceTestRequest.TestData.SearchData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIncludedtagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getExcludedtagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.SourceTestRequest.TestData.SearchData.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SourceTestRequest.TestData.SearchData} returns this
 */
proto.SourceTestRequest.TestData.SearchData.prototype.setQuery = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.SourceTestRequest.TestData.SearchData} returns this
 */
proto.SourceTestRequest.TestData.SearchData.prototype.clearQuery = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SourceTestRequest.TestData.SearchData.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string includedTags = 2;
 * @return {!Array<string>}
 */
proto.SourceTestRequest.TestData.SearchData.prototype.getIncludedtagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.SourceTestRequest.TestData.SearchData} returns this
 */
proto.SourceTestRequest.TestData.SearchData.prototype.setIncludedtagsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.SourceTestRequest.TestData.SearchData} returns this
 */
proto.SourceTestRequest.TestData.SearchData.prototype.addIncludedtags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SourceTestRequest.TestData.SearchData} returns this
 */
proto.SourceTestRequest.TestData.SearchData.prototype.clearIncludedtagsList = function() {
  return this.setIncludedtagsList([]);
};


/**
 * repeated string excludedTags = 3;
 * @return {!Array<string>}
 */
proto.SourceTestRequest.TestData.SearchData.prototype.getExcludedtagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.SourceTestRequest.TestData.SearchData} returns this
 */
proto.SourceTestRequest.TestData.SearchData.prototype.setExcludedtagsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.SourceTestRequest.TestData.SearchData} returns this
 */
proto.SourceTestRequest.TestData.SearchData.prototype.addExcludedtags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SourceTestRequest.TestData.SearchData} returns this
 */
proto.SourceTestRequest.TestData.SearchData.prototype.clearExcludedtagsList = function() {
  return this.setExcludedtagsList([]);
};


/**
 * optional string itemIndex = 4;
 * @return {string}
 */
proto.SourceTestRequest.TestData.SearchData.prototype.getItemindex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.SourceTestRequest.TestData.SearchData} returns this
 */
proto.SourceTestRequest.TestData.SearchData.prototype.setItemindex = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.SourceTestRequest.TestData.SearchData} returns this
 */
proto.SourceTestRequest.TestData.SearchData.prototype.clearItemindex = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SourceTestRequest.TestData.SearchData.prototype.hasItemindex = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string itemId = 5;
 * @return {string}
 */
proto.SourceTestRequest.TestData.SearchData.prototype.getItemid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.SourceTestRequest.TestData.SearchData} returns this
 */
proto.SourceTestRequest.TestData.SearchData.prototype.setItemid = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.SourceTestRequest.TestData.SearchData} returns this
 */
proto.SourceTestRequest.TestData.SearchData.prototype.clearItemid = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SourceTestRequest.TestData.SearchData.prototype.hasItemid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string mangaId = 1;
 * @return {string}
 */
proto.SourceTestRequest.TestData.prototype.getMangaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SourceTestRequest.TestData} returns this
 */
proto.SourceTestRequest.TestData.prototype.setMangaid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.SourceTestRequest.TestData} returns this
 */
proto.SourceTestRequest.TestData.prototype.clearMangaid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SourceTestRequest.TestData.prototype.hasMangaid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chapterId = 2;
 * @return {string}
 */
proto.SourceTestRequest.TestData.prototype.getChapterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SourceTestRequest.TestData} returns this
 */
proto.SourceTestRequest.TestData.prototype.setChapterid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.SourceTestRequest.TestData} returns this
 */
proto.SourceTestRequest.TestData.prototype.clearChapterid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SourceTestRequest.TestData.prototype.hasChapterid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp updateTime = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.SourceTestRequest.TestData.prototype.getUpdatetime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.SourceTestRequest.TestData} returns this
*/
proto.SourceTestRequest.TestData.prototype.setUpdatetime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SourceTestRequest.TestData} returns this
 */
proto.SourceTestRequest.TestData.prototype.clearUpdatetime = function() {
  return this.setUpdatetime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SourceTestRequest.TestData.prototype.hasUpdatetime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SearchData searchData = 4;
 * @return {?proto.SourceTestRequest.TestData.SearchData}
 */
proto.SourceTestRequest.TestData.prototype.getSearchdata = function() {
  return /** @type{?proto.SourceTestRequest.TestData.SearchData} */ (
    jspb.Message.getWrapperField(this, proto.SourceTestRequest.TestData.SearchData, 4));
};


/**
 * @param {?proto.SourceTestRequest.TestData.SearchData|undefined} value
 * @return {!proto.SourceTestRequest.TestData} returns this
*/
proto.SourceTestRequest.TestData.prototype.setSearchdata = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SourceTestRequest.TestData} returns this
 */
proto.SourceTestRequest.TestData.prototype.clearSearchdata = function() {
  return this.setSearchdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SourceTestRequest.TestData.prototype.hasSearchdata = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string sourceId = 1;
 * @return {string}
 */
proto.SourceTestRequest.prototype.getSourceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SourceTestRequest} returns this
 */
proto.SourceTestRequest.prototype.setSourceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TestData data = 2;
 * @return {?proto.SourceTestRequest.TestData}
 */
proto.SourceTestRequest.prototype.getData = function() {
  return /** @type{?proto.SourceTestRequest.TestData} */ (
    jspb.Message.getWrapperField(this, proto.SourceTestRequest.TestData, 2));
};


/**
 * @param {?proto.SourceTestRequest.TestData|undefined} value
 * @return {!proto.SourceTestRequest} returns this
*/
proto.SourceTestRequest.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SourceTestRequest} returns this
 */
proto.SourceTestRequest.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SourceTestRequest.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SourceTestResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SourceTestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SourceTestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SourceTestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SourceTestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    testcase: jspb.Message.getFieldWithDefault(msg, 1, ""),
    completetime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    failuresList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SourceTestResponse}
 */
proto.SourceTestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SourceTestResponse;
  return proto.SourceTestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SourceTestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SourceTestResponse}
 */
proto.SourceTestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTestcase(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCompletetime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addFailures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SourceTestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SourceTestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SourceTestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SourceTestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTestcase();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCompletetime();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getFailuresList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string testCase = 1;
 * @return {string}
 */
proto.SourceTestResponse.prototype.getTestcase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SourceTestResponse} returns this
 */
proto.SourceTestResponse.prototype.setTestcase = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 completeTime = 2;
 * @return {number}
 */
proto.SourceTestResponse.prototype.getCompletetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.SourceTestResponse} returns this
 */
proto.SourceTestResponse.prototype.setCompletetime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string failures = 4;
 * @return {!Array<string>}
 */
proto.SourceTestResponse.prototype.getFailuresList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.SourceTestResponse} returns this
 */
proto.SourceTestResponse.prototype.setFailuresList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.SourceTestResponse} returns this
 */
proto.SourceTestResponse.prototype.addFailures = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SourceTestResponse} returns this
 */
proto.SourceTestResponse.prototype.clearFailuresList = function() {
  return this.setFailuresList([]);
};


goog.object.extend(exports, proto);
